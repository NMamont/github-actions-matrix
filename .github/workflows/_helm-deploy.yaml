# @example=### Example1: Basic example
# name: "Basic example"
# on:
#   pull_request:
# jobs:
#   docker-build:
#     name: Run docker build ccm-service
#     uses: ./.github/workflows/_helm-deploy.yaml
#     with:
#       chart_version: ${{github.ref_name}} - chart version prefix 
#       service_name: ccm-service 
#       docker_image_tag: 4.0.24-dev 
#       namespace: github-actions
 


name: Template helm deploy
on:
  workflow_call:
    inputs:
      helm_args:
        description: "args for helm chart"
        type: string
      chart_version:
        description: "chart version to deploy"
        type: string
      chart_repo:
        description: "chart repo for charts"
        type: string
      docker_image_tag:
        description: "docker tag version to deploy"
        type: string
      service_name:
        description: "service name which would to build"
        required: true
        type: string
      namespace:
        description: "namespace in which helm should deploy chart"
        type: string
      local_helm:
        description: "If true should deploy chart from git repo not from chart repo"
        type: boolean
        default: false

env:
  SERVICE_NAME: ${{inputs.service_name}}
  CHART_PATH: "helm/src"
  NAMESPACE: ${{ inputs.namespace || 'default' }}
  HELM_ARGS: ${{ inputs.helm_args || '' }}
  CHART_VERSION: ${{ inputs.chart_version || '' }}
  DOCKER_IMAGE_TAG: ${{inputs.docker_image_tag || ''}}
  CHART_REPO: ${{inputs.chart_repo || 'kms'}}
  KUBE_CONFIG_PATH: "${{github.workspace}}/kubeconfig"

jobs:
  helm-deploy:
    runs-on: kms-dev-k8s
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.11.2

      - name: Generate kubeconfig
        run: |
          echo -n "${{ secrets.KUBE_CONFIG }}" | base64 -d > ${{ env.KUBE_CONFIG_PATH }} && chmod 644 ${{ env.KUBE_CONFIG_PATH }}

      - name: Get chart name
        id: chart-name
        run: |
          CHART_NAME=$(ls -1 ${{env.SERVICE_NAME}}/${{env.CHART_PATH}})
          echo "$CHART_NAME"
          echo "CHART_NAME=$CHART_NAME" >> "$GITHUB_OUTPUT"

      - name: Get chart version
        id: chart-version
        run: |
          CHART_CURRENT_VERSION=$(helm show chart ./${{ env.SERVICE_NAME }}/${{ env.CHART_PATH }}/${{ env.CHART_NAME }} | grep version | cut -d ":" -f 2)
          CHART_VERSION=$(echo ${{ env.CHART_VERSION }} | cut -d '/' -f 2)
          echo "current version - $CHART_CURRENT_VERSION"
          if [[ -z $CHART_VERSION ]]; then
            echo "CHART_VERSION=$CHART_CURRENT_VERSION" >> "$GITHUB_OUTPUT"
            echo "new version - $CHART_VERSION"
          else
            CHART_VERSION_TAG=$CHART_CURRENT_VERSION-$CHART_VERSION
            echo "CHART_VERSION=$CHART_VERSION_TAG" >> "$GITHUB_OUTPUT"
            echo "new version - $CHART_VERSION"
          fi
        env:
          CHART_NAME: ${{steps.chart-name.outputs.CHART_NAME}}

      - name: Generate values file path
        id: chart-path
        run: |
          VALUES_FILE=$( echo -n ${{github.workspace}}/.github/configs/helm/${{env.NAMESPACE}}-${{env.SERVICE_NAME}}-secret-values.yaml)
          echo $VALUES_FILE
          echo "VALUES_FILE=$VALUES_FILE" >> "$GITHUB_OUTPUT"

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v5
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1.4.1
        id: install_sops

      - name: Prepare values
        run: |
          sops -d -i ${{ env.VALUES_FILE }} -p ${{secrets.GPG_FINGERPRINT}}
        env:
          VALUES_FILE: ${{steps.chart-path.outputs.VALUES_FILE}}

      - name: Deploy from local repo
        if: ${{ inputs.local_helm }}
        run: |
          cd ${{env.SERVICE_NAME}}/${{env.CHART_PATH}}/${{env.CHART_NAME}}
          helm upgrade -i --wait --atomic --timeout 600s --create-namespace --kubeconfig ${{ env.KUBE_CONFIG_PATH }} --set imageTag=${{env.DOCKER_IMAGE_TAG}} -n ${{env.NAMESPACE}} ${{ env.HELM_ARGS }}  -f ${{ env.VALUES_FILE }} ${{env.CHART_NAME}} .
        env:
          CHART_NAME: ${{steps.chart-name.outputs.CHART_NAME}}
          VALUES_FILE: ${{steps.chart-path.outputs.VALUES_FILE}}

      - name: Check local repo
        id: remote-repo
        run: |
          if ${{ inputs.local_helm }}; then
            remote_repo=false
          else
            remote_repo=true
          fi
          echo "remote_repo=$remote_repo" >> "$GITHUB_OUTPUT"
          echo $remote_repo

      - name: Deploy from remote repo
        if: steps.remote-repo.outputs.remote_repo == 'true'
        run: |
          helm repo add ${{env.CHART_REPO}} --username ${{secrets.GITHUB_TOKEN}} --password ${{secrets.GITHUB_TOKEN}} "https://raw.githubusercontent.com/ovhcloud-kms/ovhcloud-kms/helm-charts/charts"
          helm upgrade -i --wait --devel --atomic --timeout 600s --create-namespace --kubeconfig ${{ env.KUBE_CONFIG_PATH }} --set imageTag=${{env.DOCKER_IMAGE_TAG}} -n ${{env.NAMESPACE}} ${{ env.HELM_ARGS }}  -f ${{ env.VALUES_FILE }} ${{env.CHART_NAME}} ${{env.CHART_REPO}}/${{env.CHART_NAME}} --version ${{env.CHART_VERSION}}
        env:
          CHART_NAME: ${{steps.chart-name.outputs.CHART_NAME}}
          VALUES_FILE: ${{steps.chart-path.outputs.VALUES_FILE}}
          CHART_VERSION: ${{steps.chart-version.outputs.CHART_VERSION}}
